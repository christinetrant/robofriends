{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","borderTop","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"oOAmBeA,EAhBF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAG5B,OACC,kBAAC,WAAD,KACC,yBAAKC,UAAU,+DACd,yBAAKC,IAAI,QAAQC,IAAG,+BAA0BH,EAA1B,6BACpB,6BACC,wBAAIC,UAAU,MAAMH,GACpB,2BAAIC,OC8BMK,EAvCE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAiBlB,OACC,6BAGEA,EAAOC,KAAI,SAACC,EAAMC,GACjB,OACC,kBAAC,EAAD,CACCC,IAAKJ,EAAOG,GAAGR,GACfA,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCjBTW,EAXG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aACnB,OACC,2BACCC,KAAK,SACLC,YAAY,oBACZZ,UAAU,6BACVa,SAAUH,KCGEI,EATA,SAACC,GAEf,OACC,yBAAKC,MAAO,CAACC,UAAW,SAAUC,UAAW,oBAAqBC,OAAQ,SACxEJ,EAAMK,WCgBKC,E,kDAnBd,WAAYN,GAAQ,IAAD,8BAClB,cAAMA,IACDO,MAAQ,CACZC,UAAU,GAHO,E,8DAODC,EAAOC,GACxBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAGG,KAAKJ,MAAMC,SACN,wBAAIvB,UAAU,gBAAd,+BAED0B,KAAKX,MAAMK,a,GAhBOQ,aCwEZC,G,wDAnDd,aAAe,IAAD,8BACb,gBAkBDC,eAAiB,SAACC,GACjB,EAAKJ,SAAS,CAAEK,YAAaD,EAAME,OAAOC,SAlB1C,EAAKZ,MAAQ,CAGZlB,OAAQ,GACR4B,YAAa,IAND,E,gEAYO,IAAD,OACnBG,MAAM,8CACJC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKZ,SAAS,CAAEvB,OAAQmC,S,+BAYhC,MAEwBb,KAAKJ,MAA7BlB,EAFA,EAEAA,OAAQ4B,EAFR,EAEQA,YACVQ,EAAiBpC,EAAOqC,QAAO,SAAAC,GACpC,OAAOA,EAAM7C,KAAK8C,cAAcC,SAASZ,EAAYW,kBAItD,OAAQvC,EAAOyC,OAGb,yBAAK7C,UAAU,MACd,wBAAIA,UAAU,eAAd,eACA,kBAAC,EAAD,CAAWU,aAAgBgB,KAAKI,iBAEhC,kBAAC,EAAD,KACC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAU1B,OAAQoC,OARtB,wBAAIxC,UAAU,kBAAd,e,GArCe4B,cCVEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCLNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACA,kBAAC,EAAD,OAMAC,SAASC,eAAe,SD8GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAArC,GACLsC,QAAQtC,MAAMA,EAAMuC,a","file":"static/js/main.3d40b414.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\r\n\r\n// const Card = (props) => {\r\nconst Card = ({ name, email, id }) => {\r\n\t// destructuring but we can put below in parameter above instead of props\r\n\t// const { name, email, id } = props\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<div className='athelas bg-light-green br3 tc dib pa2 ma2 grow shadow-5 bw2'>\r\n\t\t\t\t<img alt='robot' src={`https://robohash.org/${id}/set_set2/?size=200x200`}/>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<h4 className='f4'>{name}</h4>\r\n\t\t\t\t\t<p>{email}</p>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</Fragment>\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n\t// to test the error we can create one below to test our ErrorBoundry\r\n\t// if(true) {\r\n\t// \tthrow new Error('Oopsies!');\r\n\t// }\r\n\t// rather than calling each card by index we map to create a new array\r\n\t// In the console we get an error: Warning: Each child in a list should have a unique \"key\" prop. so we add a unique key e.g. the id\r\n\t// const CardArray = robots.map((user, i) => {\r\n\t// \treturn (\r\n\t// \t\t<Card \r\n\t// \t\t\tkey={robots[i].id} \r\n\t// \t\t\tid={robots[i].id} \r\n\t// \t\t\tname={robots[i].name} \r\n\t// \t\t\temail={robots[i].email} \r\n\t// \t\t/>\r\n\t// \t)\r\n\t// })\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{/*{ CardArray }*/}\r\n\t\t\t{\r\n\t\t\t\trobots.map((user, i) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<Card \r\n\t\t\t\t\t\t\tkey={robots[i].id} \r\n\t\t\t\t\t\t\tid={robots[i].id} \r\n\t\t\t\t\t\t\tname={robots[i].name} \r\n\t\t\t\t\t\t\temail={robots[i].email} \r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t)\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\t{/*<Card id={robots[0].id} name={robots[0].name} email={robots[0].email} />\r\n\t\t\t\t    <Card id={robots[1].id} name={robots[1].name} email={robots[1].email} />\r\n\t\t\t\t    <Card id={robots[2].id} name={robots[2].name} email={robots[2].email} />*/}\r\n\t   </div>\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n\treturn (\r\n\t\t<input \r\n\t\t\ttype='search' \r\n\t\t\tplaceholder='search for robots' \r\n\t\t\tclassName='bg-washed-blue br2 pa2 mb2' \r\n\t\t\tonChange={searchChange}\r\n\t\t/>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react'\r\n\r\nconst Scroll = (props) => {\r\n\t// return props.children\r\n\treturn (\r\n\t\t<div style={{overflowY: 'scroll', borderTop: '1px solid #96ccff', height: '80vh'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info) {\r\n\t\tthis.setState({ hasError: true })\r\n\t}\r\n\r\n\trender() {\r\n\t\tif(this.state.hasError) {\r\n\t\t\treturn <h1 className='tc lightblue'>Hey! Where'd my content go!</h1>\r\n\t\t}\r\n\t\treturn this.props.children\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\n// import { robots } from './robots';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport './App.css';\r\n\r\n// Using state\r\n// https://www.freecodecamp.org/news/react-js-for-beginners-props-state-explained/\r\n// We want the search input to talk to the robots list and update cards accordingly, to do this searchfield and cardlist need a parent in common\r\n// const state = {\r\n// \trobots: robots,\r\n// \tsearchfield: ''\r\n// }\r\n\r\n\r\n// Inside state - these are the things that can change and affect our app: \r\n// State is defined in the parent and passed to Component child as props (properties)\r\n\r\n// In order to use state we need to use classes\r\n// const App = () => {\r\nclass App extends Component {\r\n\tconstructor() {\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\t// robots: robots,\r\n\t\t\t// we will be getting the list so we start off with an empty array\r\n\t\t\trobots: [],\r\n\t\t\tsearchfield: ''\r\n\t\t}\r\n\t}\r\n\t\r\n\t// when component 'mounts' we set robots to equal robots array from robots.js:\r\n\t// instead of fetching array we get user info from jsonplaceholder then we convert response into JSON then we set that to equal the robots array\r\n\tcomponentDidMount() {\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t\t.then(response => response.json())\r\n\t\t\t.then(users => this.setState({ robots: users }));\r\n\t\t// this.setState({ robots: robots })\r\n\t}\r\n\r\n\tonSearchChange = (event) => {\r\n\t\tthis.setState({ searchfield: event.target.value })\r\n\t\t// const filteredRobots = this.state.robots.filter(robot => {\r\n\t\t// \treturn robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n\t\t// })\r\n\t\t// console.log(filteredRobots);\r\n\t}\r\n\r\n\trender() {\r\n\t\t// instead of calling this.state.searchfield and this.state.robots we can destructure:\r\n\t\tconst { robots, searchfield } = this.state\r\n\t\tconst filteredRobots = robots.filter(robot => {\r\n\t\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n\t\t})\r\n\t\t\r\n\t\t// if(robots.length === 0) {\r\n\t\treturn !robots.length ?\t\r\n\t\t\t<h1 className='tc light-green'>Loading</h1>\t:\r\n\t\t\t(\r\n\t\t\t\t<div className='tc'>\r\n\t\t\t\t\t<h1 className='light-green'>RoboFriends</h1>\r\n\t\t\t\t\t<SearchBox searchChange = {this.onSearchChange} />\r\n\t\t\t\t\t{/*<CardList robots={robots} /> */}\r\n\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t\t<ErrorBoundry>\r\n\t\t\t\t\t\t\t<CardList robots={filteredRobots} />\r\n\t\t\t\t\t\t</ErrorBoundry>\r\n\t\t\t\t\t</Scroll>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t}\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import CardList from './CardList';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n// robots isn't a default app, it is a variable so we destructure when calling (curly brackets)\n// import { robots } from './robots'\n\n// if we are using javascript we wrap in curly brackets - JSX rules\n\n// We don't want to call each card separately - what if we have 20 cards?  So we create a cardlist component\nReactDOM.render(\n  <React.StrictMode>\n  <App />\n  {/*<CardList robots={robots} />*/}\n    {/*<Card id={robots[0].id} name={robots[0].name} email={robots[0].email} />\n    <Card id={robots[1].id} name={robots[1].name} email={robots[1].email} />\n    <Card id={robots[2].id} name={robots[2].name} email={robots[2].email} />*/}\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}